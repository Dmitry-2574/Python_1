document.body.style.background = 'green';

console.log(navigator.platform);




// let car = {

//     model: 'Toyota',

//     color: 'Red',

//     go: function() {

//         console.log('Машина едет');


//     },
//     goDetail: function() {
//         console.log(`Машина ${this.color} едет с подробностями`);
//     },
//     getDriver(driveName){
//         this.drive = driveName;
//     }


// };
 
// console.log(car.model);
// console.log(car.color);
// car.go();
// car.goDetail();




// Объект для работы со списком покупок
// const shoppingList = {
//     items: [], // Массив для хранения элементов списка

//     // Функция для запуска процесса создания списка покупок
//     start: function() {
//         let input = prompt('Введите ваш список покупок, разделенный пробелами:');
//         this.items = input.split(' '); // Преобразование строки в массив
//         console.log(this.items); // Вывод массива в консоль

//         alert(`В вашем списке ${this.items.length} элементов.`); // Уведомление о количестве элементов

//         this.modifyList(); // Переход к модификации списка
//     },

//     // Функция для модификации списка
//     modifyList: function() {
//         let itemIndex = parseInt(prompt(`Введите номер элемента из списка (от 1 до ${this.items.length}):`)) - 1;
//         if (itemIndex >= 0 && itemIndex < this.items.length) {
//             alert(`Выбранный элемент: ${this.items[itemIndex]}`); // Показываем выбранный элемент
//             let newItem = prompt('Хотите заменить этот элемент? Если да, введите новый элемент:');
//             if (newItem.trim() !== '') {
//                 this.items[itemIndex] = newItem; // Замена старого элемента на новый
//                 console.log(`Элемент ${itemIndex + 1} был заменён на ${newItem}`); // Вывод в консоль о замене
//             }
//             this.showUpdatedList(); // Показ обновленного списка
//         } else {
//             alert('Неверный номер элемента!');
//         }
//     },

//     // Функция для показа обновленного списка
//     showUpdatedList: function() {
//         const updatedList = this.items.join(', '); // Объединение массива в строку с запятыми
//         alert(`Ваш обновленный список покупок: ${updatedList}`); // Уведомление пользователя об обновленном списке
//     }
// };

// // Функция, запускающая весь процесс создания и модификации списка покупок
// function startShoppingList() {
//     shoppingList.start(); 
// }

// ```

// ## Пояснения решения

// В данном решении мы создаем простое веб-приложение для управления списком покупок с использованием JavaScript. Основные этапы работы программы описаны ниже.

// ### 1. Структура HTML

// Мы начинаем с создания стандартной структуры HTML-документа, включающей теги `<html>`, `<head>` и `<body>`. Внутри тега `<body>` добавляем кнопку, которая будет инициировать процесс создания списка покупок.


// <button onclick="startShoppingList()">Создать список покупок</button>
// ```

// Кнопка вызывает функцию `startShoppingList()`, которая запускает весь процесс.

// ### 2. Создание объекта для работы со списком

// В JavaScript мы создаем объект `shoppingList`, который будет содержать массив `items` для хранения списка покупок и несколько методов для работы с этим списком.


// const shoppingList = {
// items: [], // Массив для хранения элементов списка
// ...
// };
// ```

// ### 3. Запрос данных у пользователя

// Метод `start()` объекта `shoppingList` отвечает за ввод данных от пользователя:

// - С помощью метода `prompt` запрашиваем у пользователя список покупок, разделенный пробелами.
// - Введенная строка преобразуется в массив с помощью метода `split(' ')`.
// - Затем выводим полученный массив в консоль и уведомляем пользователя о количестве элементов в списке через `alert`.


// let input = prompt('Введите ваш список покупок, разделенный пробелами:');
// this.items = input.split(' '); // Преобразование строки в массив
// console.log(this.items); // Вывод массива в консоль
// alert(`В вашем списке ${this.items.length} элементов.`); // Уведомление о количестве элементов
// ```

// ### 4. Модификация массива

// Метод `modifyList()` позволяет пользователю модифицировать выбранный элемент списка:

// - Запрашиваем у пользователя номер элемента (от 1 до N) и преобразуем его в индекс массива.
// - Проверяем корректность введенного номера элемента. Если все верно, показываем выбранный элемент через `alert`.
// - Запрашиваем у пользователя новый элемент для замены старого. Если введено новое значение, заменяем его в массиве.


// let itemIndex = parseInt(prompt(`Введите номер элемента из списка (от 1 до ${this.items.length}):`)) - 1;

// if (itemIndex >= 0 && itemIndex < this.items.length) {
// alert(`Выбранный элемент: ${this.items[itemIndex]}`); // Показываем выбранный элемент
// let newItem = prompt('Хотите заменить этот элемент? Если да, введите новый элемент:');
// if (newItem.trim() !== '') {
//     this.items[itemIndex] = newItem; // Замена старого элемента на новый
//     console.log(`Элемент ${itemIndex + 1} был заменён на ${newItem}`); // Вывод в консоль о замене
// }
// }
// ```

// ### 5. Обратное преобразование

// После завершения модификации пользователь видит обновленный список:

// Метод `showUpdatedList()` объединяет элементы массива обратно в строку с помощью метода `join(', ')` и выводит их пользователю через `alert`.


// const updatedList = this.items.join(', '); // Объединение массива в строку с запятыми
// alert(`Ваш обновленный список покупок: ${updatedList}`); // Уведомление пользователя об обновленном списке
// ```

// ### Заключение

// Программа позволяет пользователю интерактивно создавать и изменять список покупок, используя базовые методы работы со строками и массивами в JavaScript. Все взаимодействия осуществляются через средства браузера (всплывающие окна), что делает процесс простым и интуитивным.

// Такой подход является хорошей практикой для создания интерактивных приложений с использованием JavaScript. Он включает в себя несколько ключевых аспектов:

// 1. **Интерактивность**: Использование `prompt` и `alert` позволяет пользователю активно участвовать в процессе, вводя данные и получая отклики от приложения.

// 2. **Структурированный код**: Создание объекта с методами для управления списком покупок помогает организовать код и делает его более читаемым и поддерживаемым.

// 3. **Работа с массивами и строками**: Задание охватывает основные методы работы с массивами (`split`, `join`) и строками, что является важным аспектом программирования на JavaScript.

// 4. **Проверка ввода данных**: Программа включает проверку корректности пользовательского ввода (например, проверка индекса), что улучшает пользовательский опыт и предотвращает ошибки выполнения.

// 5. **Консольные логи**: Использование `console.log` для отладки позволяет разработчику отслеживать изменения в массиве и уверенно выявлять возможные проблемы.

// Таким образом, данный подход демонстрирует эффективное использование возможностей JavaScript для создания простого, но функционального веб-приложения.


